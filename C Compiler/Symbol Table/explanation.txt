sym.h:
Token Types and Constants:
c
Copy code
/* maximum size of hash table */
#define SIZE 211

/* maximum size of tokens-identifiers */
#define MAXTOKENLEN 40

/* token types */
#define UNDEF 0
#define INT_TYPE 1
#define REAL_TYPE 2
#define STR_TYPE 3
#define LOGIC_TYPE 4
#define ARRAY_TYPE 5
#define FUNCTION_TYPE 6

/* how parameter is passed */
#define BY_VALUE 1
#define BY_REFER 2
These define constants related to the symbol table implementation, including the maximum size of the hash table, the maximum size of tokens/identifiers, and various token types representing data types and parameter passing methods.

Parameter Structure and Linked List Structure:
c
Copy code
/* parameter struct */
typedef struct Param {
    int par_type;
    char param_name[MAXTOKENLEN];
    // to store value
    int ival; double fval; char *st_sval;
    int passing; // value or reference
} Param;

/* a linked list of references (lineno's) for each variable */
typedef struct RefList {
    int lineno;
    struct RefList *next;
    int type;
} RefList;
These define the Param structure to store information about function parameters and the RefList structure, a linked list to store line numbers and types of references for each variable.

List Node Structure:
c
Copy code
// struct that represents a list node
typedef struct list_t {
    char st_name[MAXTOKENLEN];
    int st_size;
    int scope;
    RefList *lines;
    // to store value and sometimes more information
    int st_ival; double st_fval; char *st_sval;
    // type
    int st_type;
    int inf_type; // for arrays (info type) and functions (return type)
    // array stuff
    int *i_vals; double *f_vals; char **s_vals;
    int array_size;
    // function parameters
    Param *parameters;
    int num_of_pars;
    // pointer to the next item in the list
    struct list_t *next;
} list_t;
This defines the list_t structure representing a node in the symbol table. It includes fields for the variable or identifier name, size, scope, reference list, value, type, information type for arrays and functions, array-related information, function parameters, and a pointer to the next item in the list.

Function Declarations:
c
Copy code
/* the hash table */
static list_t **hash_table;

// Function Declarations
void init_hash_table(); // initialize hash table
unsigned int hash(char *key); // hash function 
void insert(char *name, int len, int type, int lineno); // insert entry
list_t *lookup(char *name); // search for entry
list_t *lookup_scope(char *name, int scope); // search for entry in scope
void hide_scope(); // hide the current scope
void incr_scope(); // go to the next scope
void symtab_dump(FILE *of); // dump file
These declare the global variable hash_table, function declarations to initialize and manipulate the hash table, and a function to dump the contents of the symbol table to a file.

sym.c:
Include Statements:
c
Copy code
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "symtab.h"
Includes standard libraries and the header file symtab.h for the symbol table definitions.

Hash Table Initialization:
c
Copy code
void init_hash_table() {
    int i; 
    hash_table = malloc(SIZE * sizeof(list_t*));
    for(i = 0; i < SIZE; i++) hash_table[i] = NULL;
}
Initializes the hash table, allocating memory and setting initial values.

Hash Function:
c
Copy code
unsigned int hash(char *key) {
    unsigned int hashval = 0;
    for(; *key != '\0'; key++) hashval += *key;
    hashval += key[0] % 11 + (key[0] << 3) - key[0];
    return hashval % SIZE;
}
Defines the hash function to calculate the index for a given key.

Insertion Function:
c
Copy code
void insert(char *name, int len, int type, int lineno) {
    // Implementation of inserting an entry into the hash table
    // ...
}
Implements the insertion of an entry into the hash table, handling collisions and updating existing entries.

Lookup Functions:
c
Copy code
list_t *lookup(char *name) {
    // Implementation of searching for an entry in the hash table
    // ...
}

list_t *lookup_scope(char *name, int scope) {
    // Implementation of searching for an entry in a specific scope
    // ...
}
Implement functions to search for entries in the hash table, considering both global and specific scope lookups.

Scope Management Functions:
c
Copy code
void hide_scope() {
    // Implementation of hiding the current scope
    // ...
}

void incr_scope() {
    // Implementation of going to the next scope
    // ...
}
Implements functions to manage scopes, allowing hiding the current scope and moving to the next scope.

Symbol Table Dump Function:
c
Copy code
void symtab_dump(FILE *of) {
    // Implementation of dumping the contents of the symbol table to a file
    // ...
}
Implements the function to dump the contents of the symbol table to a specified file.
